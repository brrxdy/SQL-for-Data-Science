Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = user_id - 537
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
SELECT *
FROM user
WHERE id = NULL or name = NULL or review_count = NULL or yelping_since = NULL or useful = NULL or funny = NULL or cool = NULL or fans= NULL or average_stars= NULL or compliment_hot= NULL or compliment_more= NULL or compliment_profile= NULL or compliment_cute= NULL or compliment_list= NULL or compliment_note= NULL or compliment_plain = NULL or compliment_cool= NULL or compliment_funny= NULL or compliment_writer= NULL or compliment_photos= NULL
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT city, sum(review_count)
FROM business
GROUP BY city
ORDER BY sum(review_count) DESC;
	
	
	Copy and Paste the Result Below:
+-----------------+-------------------+
| city            | sum(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| MontrÃ©al        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars AS star_rating, SUM(review_count) AS countt
FROM business
WHERE city = 'Avon'
GROUP BY star_rating
ORDER BY star_rating ASC;


Copy and Paste the Resulting Table Below (2 columns Ã¢â‚¬â€œ star rating and count):
+-------------+--------+
| star_rating | countt |
+-------------+--------+
|         1.5 |     10 |
|         2.5 |      6 |
|         3.5 |     88 |
|         4.0 |     21 |
|         4.5 |     31 |
|         5.0 |      3 |
+-------------+--------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT stars AS star_rating, SUM(review_count) AS countt
FROM business
WHERE city = 'Beachwood'
GROUP BY star_rating
ORDER BY star_rating ASC;


Copy and Paste the Resulting Table Below (2 columns Ã¢â‚¬â€œ star rating and count):
+-------------+--------+
| star_rating | countt |
+-------------+--------+
|         2.0 |      8 |
|         2.5 |      3 |
|         3.0 |     11 |
|         3.5 |      6 |
|         4.0 |     69 |
|         4.5 |     17 |
|         5.0 |     23 |
+-------------+--------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT name, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3	
		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
More reviews does not necessarily correlate with having more fans. In the query/table below, you can see that there is seemingly no direct correlation between the two variables.
An example of this would be William having 1215 reviews, but only having 126 fans while Amy has 609 reviews, but 503 fans. Another way to look at this would be to compare the ORDER BY tables created from descending fans and descending reviews. If there was some correlation, the two tables would be roughly in the same order if ordered in either of those two choices. 

SELECT name, review_count, fans, yelping_since
FROM user
ORDER BY fans DESC;

+-----------+--------------+------+---------------------+
| name      | review_count | fans | yelping_since       |
+-----------+--------------+------+---------------------+
| Amy       |          609 |  503 | 2007-07-19 00:00:00 |
| Mimi      |          968 |  497 | 2011-03-30 00:00:00 |
| Harald    |         1153 |  311 | 2012-11-27 00:00:00 |
| Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |
| Christine |          930 |  173 | 2009-07-08 00:00:00 |
| Lisa      |          813 |  159 | 2009-10-05 00:00:00 |
| Cat       |          377 |  133 | 2009-02-05 00:00:00 |
| William   |         1215 |  126 | 2015-02-19 00:00:00 |
| Fran      |          862 |  124 | 2012-04-05 00:00:00 |
| Lissa     |          834 |  120 | 2007-08-14 00:00:00 |
| Mark      |          861 |  115 | 2009-05-31 00:00:00 |
| Tiffany   |          408 |  111 | 2008-10-28 00:00:00 |
| bernice   |          255 |  105 | 2007-08-29 00:00:00 |
| Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |
| Angela    |          694 |  101 | 2010-10-01 00:00:00 |
| .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |
| Ben       |          307 |   96 | 2007-03-10 00:00:00 |
| Linda     |          584 |   89 | 2005-08-07 00:00:00 |
| Christina |          842 |   85 | 2012-10-08 00:00:00 |
| Jessica   |          220 |   84 | 2009-01-12 00:00:00 |
| Greg      |          408 |   81 | 2008-02-16 00:00:00 |
| Nieves    |          178 |   80 | 2013-07-08 00:00:00 |
| Sui       |          754 |   78 | 2009-09-07 00:00:00 |
| Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |
| Nicole    |          161 |   73 | 2009-04-30 00:00:00 |
+-----------+--------------+------+---------------------+
(Output limit exceeded, 25 of 10000 total rows shown)

	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love"

	
	SQL code used to arrive at answer:
SELECT COUNT(*)
FROM review
WHERE text LIKE '%love%'

+----------+
| COUNT(*) |
+----------+
|     1780 |
+----------+

SELECT COUNT(*)
FROM review
WHERE text LIKE '%hate%'

+----------+
| COUNT(*) |
+----------+
|      232 |
+----------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT name, fans
FROM user
ORDER BY fans DESC
LIMIT 10	
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
Yes

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
There is nothing of high significance to infer as the number of options is quite small. However, from looking at this data it seems that people are more likely and willing to write reviews for the more highly rated establishments. As for locations, I'd also be willing to venture and say the establishments with higher review counts are in the busier parts of Toronto. 


SQL code used for analysis:
SELECT b.name, b.city, b.stars, b.review_count, b.postal_code, c.category, h.hours
FROM business b 
INNER JOIN category c ON b.id = c.business_id
INNER JOIN hours h ON b.id = h.business_id
WHERE city LIKE 'Toronto' AND category LIKE 'Food'
GROUP BY b.stars
ORDER BY b.stars ASC

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
The businesses that are still open have a much higher review count         
         
ii. Difference 2:
The businesses that are still open have a much higher star rating         
         
         
SQL code used for analysis:
SELECT b.is_open, b.name, b.city, b.stars, b.review_count, b.postal_code, c.category, h.hours
FROM business b 
INNER JOIN category c ON b.id = c.business_id
INNER JOIN hours h ON b.id = h.business_id
WHERE city LIKE 'Toronto' 
GROUP BY b.is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
Comparison between Saturday hours of operation and average restaurant rating for several cities in Arizona

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I will need three data sets (tables) to perform this analysis: business, hours, and category. I will first join the business and hours tables to show the hours of operation for each restaurant on saturdays. This will then be filtered by a select few cities in the state of Arizona and each restaurants rating will be shown. I then joined the business table to the category table and filtered it where only establishments in the restaurants category showed up on the table. The category [Business Category] was added to the table to ensure that all items in the table belonged to the restaurant category. 
There was no true reason as to why I chose this data other than wanting to find out if there was any potential correlation between hours of operation and overall rating. Personally, I feel that the best things in life are more difficult to come by. In other words, they are more limited and/or rare. That assumption holds true with restaurants as well; I believe that the better restaurants are more difficult to get into partly because they have smaller hours of operation and are highly more desirable than lesser rated restaurants. Upon looking at the table, this assumption holds true for the most part. The highest rated restaurant in this specific area, Green Corner Restaurant, has a 5.0 star rating and is only open for 10.5 hours on Saturday. Meanwhile, McDonald's, the lowest rated restaurant in the area with a 2.0 star rating, is open for 19 hours. That is but one example; however, the assumption that better restaurants have smaller hours of operation on Saturday's seems to hold true throughout the below table with the exception of one restaurant, Nabers Music, Bar & Eats.
                           
                  
iii. Output of your finished dataset:
+----------------------------------------+----------+-------------------+----------------------+-------------------+
| Restaurant Name                        | City     | Restaurant Rating | Hours of Operation   | Business Category |
+----------------------------------------+----------+-------------------+----------------------+-------------------+
| Green Corner Restaurant                | Mesa     |               5.0 | Saturday|10:30-22:00 | Restaurants       |
| Charlie D's Catfish & Chicken          | Phoenix  |               4.5 | Saturday|11:00-18:00 | Restaurants       |
| Eklectic Pie - Mesa                    | Mesa     |               4.0 | Saturday|11:00-22:00 | Restaurants       |
| Nabers Music, Bar & Eats               | Chandler |               4.0 | Saturday|11:00-2:00  | Restaurants       |
| Bootleggers Modern American Smokehouse | Phoenix  |               4.0 | Saturday|11:00-22:00 | Restaurants       |
| Five Guys                              | Phoenix  |               3.5 | Saturday|10:00-22:00 | Restaurants       |
| Irish Republic                         | Chandler |               3.0 | Saturday|9:00-2:30   | Restaurants       |
| Gallagher's                            | Phoenix  |               3.0 | Saturday|9:00-2:00   | Restaurants       |
| McDonald's                             | Phoenix  |               2.0 | Saturday|5:00-0:00   | Restaurants       |
+----------------------------------------+----------+-------------------+----------------------+-------------------+         
         
iv. Provide the SQL code you used to create your final dataset:
SELECT b.name AS [Restaurant Name], b.city AS [City], b.stars AS [Restaurant Rating], h.hours AS [Hours of Operation], c.category AS [Business Category]
FROM business b 
INNER JOIN hours h ON b.id = h.business_id
INNER JOIN category c ON b.id = c.business_id
WHERE [Hours of Operation] LIKE '%Saturday%' AND [City] IN ('Tempe', 'Chandler', 'Surprise', 'Mesa', 'Phoenix') AND [Business Category] = 'Restaurants'
ORDER BY [Restaurant Rating] DESC;